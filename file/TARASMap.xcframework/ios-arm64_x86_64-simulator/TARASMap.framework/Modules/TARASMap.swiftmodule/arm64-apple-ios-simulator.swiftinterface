// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TARASMap
import CoreGraphics
import Foundation
import ObjectiveC
import QuartzCore
import Swift
@_exported import TARASMap
import UIKit
import _Concurrency
import ObjectiveC.message
import ObjectiveC.runtime
extension TARASMap.TRSMapView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override final public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRequireFailureOf otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldBeRequiredToFailBy otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public protocol TRSMapLayer : AnyObject {
  var id: Swift.String { get }
  var name: Swift.String { get }
  var floor: Swift.Int { get }
  var isOveray: Swift.Bool { get }
  var mapItems: [TARASMap.TRSMapItem] { get set }
}
extension TARASMap.TRSMapLayer {
  public subscript(mapItemId: Swift.String) -> TARASMap.TRSMapItem? {
    get
    set
  }
}
public struct TRSMapCameraPosition {
  public static let `default`: TARASMap.TRSMapCameraPosition
  public var target: TARASMap.TRSMapPoint!
  public var zoom: CoreGraphics.CGFloat!
  public var heading: CoreGraphics.CGFloat!
  public init(target: TARASMap.TRSMapPoint? = nil, zoom: CoreGraphics.CGFloat? = nil, heading: CoreGraphics.CGFloat? = nil)
}
extension TARASMap.TRSMapCameraPosition : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct TRSMapPolygon {
  public var points: [TARASMap.TRSMapPoint]
  public init(points: [TARASMap.TRSMapPoint])
}
extension TARASMap.TRSMapPolygon : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension TARASMap.TRSMapPolygon : Swift.Equatable {
  public static func == (lhs: TARASMap.TRSMapPolygon, rhs: TARASMap.TRSMapPolygon) -> Swift.Bool
}
extension TARASMap.TRSMapPolygon {
  public var toLines: [TARASMap.TRSMapLine] {
    get
  }
}
extension TARASMap.TRSMapPolygon : TARASMap.TRSMapGeometry {
  public var centerPoint: TARASMap.TRSMapPoint {
    get
  }
  public var boundaryPoints: [TARASMap.TRSMapPoint] {
    get
  }
}
extension TARASMap.TRSMapPolygon {
  public func geometryShouldVisible(in circle: TARASMap.TRSMapCircle) -> Swift.Bool
}
extension TARASMap.TRSMapView {
  @_Concurrency.MainActor(unsafe) final public func updateCamera(_ cameraUpdate: TARASMap.TRSMapCameraUpdate, completion: ((Swift.Bool) -> Swift.Void)? = nil)
}
extension TARASMap.TRSMapView {
  @_Concurrency.MainActor(unsafe) final public func set(centerPoint: TARASMap.TRSMapPoint, zoomLevel: CoreGraphics.CGFloat? = nil, heading: CoreGraphics.CGFloat? = nil, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) final public func set(zoomLevel: CoreGraphics.CGFloat, heading: CoreGraphics.CGFloat? = nil, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) final public func set(heading: CoreGraphics.CGFloat, animated: Swift.Bool = true)
}
extension TARASMap.TRSMapView {
  @_Concurrency.MainActor(unsafe) final public func zoomIn(animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) final public func zoomOut(animated: Swift.Bool = true)
}
extension TARASMap.TRSMapView {
  @_Concurrency.MainActor(unsafe) final public func showItems(_ items: [TARASMap.TRSMapItem], withInset inset: UIKit.UIEdgeInsets = .zero, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) final public func showAllItems(withInset inset: UIKit.UIEdgeInsets = .zero, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) final public func showFullMap(animated: Swift.Bool = true)
}
public struct TRSMapSize {
  public static let zero: TARASMap.TRSMapSize
  public var width: CoreGraphics.CGFloat
  public var height: CoreGraphics.CGFloat
  public init(width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat)
}
extension TARASMap.TRSMapSize : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension TARASMap.TRSMapSize : Swift.Equatable {
  public static func == (lhs: TARASMap.TRSMapSize, rhs: TARASMap.TRSMapSize) -> Swift.Bool
}
extension TARASMap.TRSMapSize : TARASMap.TRSMapGeometry {
  public var centerPoint: TARASMap.TRSMapPoint {
    get
  }
  public var boundaryPoints: [TARASMap.TRSMapPoint] {
    get
  }
}
extension TARASMap.TRSMapSize {
  public func geometryShouldVisible(in circle: TARASMap.TRSMapCircle) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class TRSMapView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static var activeSwizzling: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var delegate: TARASMap.TRSMapViewDelegate?
  @_Concurrency.MainActor(unsafe) weak final public var gestureDelegate: TARASMap.TRSMapViewGestureDelegate?
  @_Concurrency.MainActor(unsafe) weak final public var cameraDelegate: TARASMap.TRSMapViewCameraDelegate?
  @_Concurrency.MainActor(unsafe) weak final public var optionDelegate: TARASMap.TRSMapViewOptionDelegate?
  @_Concurrency.MainActor(unsafe) weak final public var poiDelegate: TARASMap.TRSMapViewPOIDelegate?
  @_Concurrency.MainActor(unsafe) final public var cameraPosition: TARASMap.TRSMapCameraPosition {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var minZoomLevel: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var maxZoomLevel: CoreGraphics.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var isScrollEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var isZoomEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var isRotateEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var singleTapGestureEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var doubleTapGestureEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var longPressGestureEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var showsCompass: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var showsScale: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var isPOIDragging: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var mapInfo: TARASMap.TRSMapInfo! {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var mapLayers: [TARASMap.TRSMapLayer] {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var poiList: [TARASMap.TRSMapPOI] {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var selectedPOIList: [TARASMap.TRSMapPOI] {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var overayList: [TARASMap.TRSMapOveray] {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
extension TARASMap.TRSMapView {
  @_Concurrency.MainActor(unsafe) final public func reloadMap(with info: TARASMap.TRSMapInfo)
  @_Concurrency.MainActor(unsafe) final public func reloadData()
}
extension TARASMap.TRSMapView {
  @_Concurrency.MainActor(unsafe) final public func addLayer(_ layer: TARASMap.TRSMapLayer)
  @_Concurrency.MainActor(unsafe) final public func removeLayer(_ layer: TARASMap.TRSMapLayer)
}
extension TARASMap.TRSMapView {
  @_Concurrency.MainActor(unsafe) final public func addItem(_ item: TARASMap.TRSMapItem, on layer: TARASMap.TRSMapLayer? = nil)
  @_Concurrency.MainActor(unsafe) final public func addItems(_ items: [TARASMap.TRSMapItem], on layer: TARASMap.TRSMapLayer? = nil)
  @_Concurrency.MainActor(unsafe) final public func reloadItems(_ items: [TARASMap.TRSMapItem])
  @_Concurrency.MainActor(unsafe) final public func removeItem(_ item: TARASMap.TRSMapItem)
  @_Concurrency.MainActor(unsafe) final public func removeItems(_ items: [TARASMap.TRSMapItem])
}
extension TARASMap.TRSMapView {
  @_Concurrency.MainActor(unsafe) final public func view(for poi: TARASMap.TRSMapPOI) -> TARASMap.TRSMapPOIView?
  @_Concurrency.MainActor(unsafe) final public func dequeueReusablePOIView(with identifier: Swift.String, for poi: TARASMap.TRSMapPOI) -> TARASMap.TRSMapPOIView
  @_Concurrency.MainActor(unsafe) final public func register(_ viewClass: Swift.AnyClass, forPOIViewWith identifier: Swift.String)
  @_Concurrency.MainActor(unsafe) final public func selectPOI(_ poi: TARASMap.TRSMapPOI, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) final public func selectPOIs(_ pois: [TARASMap.TRSMapPOI], animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) final public func deselectPOI(_ poi: TARASMap.TRSMapPOI, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) final public func deselectPOIs(_ pois: [TARASMap.TRSMapPOI], animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) final public func deselectAllPOIs(without pois: [TARASMap.TRSMapPOI] = [], animated: Swift.Bool = true)
}
extension TARASMap.TRSMapView {
  @_Concurrency.MainActor(unsafe) final public func renderer(for overay: TARASMap.TRSMapOveray) -> TARASMap.TRSMapOverayRenderer?
  @_Concurrency.MainActor(unsafe) final public func dequeueReusableOverayRenderer(with identifier: Swift.String, for overay: TARASMap.TRSMapOveray) -> TARASMap.TRSMapOverayRenderer
  @_Concurrency.MainActor(unsafe) final public func register(_ viewClass: Swift.AnyClass, forOverayRendererWith identifier: Swift.String)
}
extension TARASMap.TRSMapView {
  @_Concurrency.MainActor(unsafe) final public func track(_ poi: TARASMap.TRSMapPOI, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) final public func invalidateTracking()
}
public struct TRSMapPolyline {
  public var points: [TARASMap.TRSMapPoint]
  public init(points: [TARASMap.TRSMapPoint])
}
extension TARASMap.TRSMapPolyline : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension TARASMap.TRSMapPolyline : Swift.Equatable {
  public static func == (lhs: TARASMap.TRSMapPolyline, rhs: TARASMap.TRSMapPolyline) -> Swift.Bool
}
extension TARASMap.TRSMapPolyline {
  public var toLines: [TARASMap.TRSMapLine] {
    get
  }
}
extension TARASMap.TRSMapPolyline : TARASMap.TRSMapGeometry {
  public var centerPoint: TARASMap.TRSMapPoint {
    get
  }
  public var boundaryPoints: [TARASMap.TRSMapPoint] {
    get
  }
}
extension TARASMap.TRSMapPolyline {
  public func geometryShouldVisible(in circle: TARASMap.TRSMapCircle) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers open class TRSMapOverayRenderer : ObjectiveC.NSObject, TARASMap.TRSMapItemDisplay {
  open var overay: TARASMap.TRSMapOveray?
  public var mapItem: TARASMap.TRSMapItem? {
    get
  }
  @objc required override dynamic public init()
  open func draw(on layer: QuartzCore.CALayer, visibleBounds: CoreGraphics.CGRect, circle: TARASMap.TRSMapCircle, zoomLevel: CoreGraphics.CGFloat, mapInfo: TARASMap.TRSMapInfo)
  @objc deinit
}
public protocol TRSMapItem : AnyObject, TARASMap.TRSMapGeometry {
  var id: Swift.String { get }
  var point: TARASMap.TRSMapPoint { get set }
  var zPriorityClosure: ((CoreGraphics.CGPoint) -> CoreGraphics.CGFloat)? { get }
  var minZoomLevel: CoreGraphics.CGFloat { get }
  var maxZoomLevel: CoreGraphics.CGFloat { get }
}
extension TARASMap.TRSMapItem {
  public var centerPoint: TARASMap.TRSMapPoint {
    get
  }
  public var boundaryPoints: [TARASMap.TRSMapPoint] {
    get
  }
}
public protocol TRSMapViewCameraDelegate : AnyObject {
  func mapView(_ mapView: TARASMap.TRSMapView, cameraWillChangeBy reason: TARASMap.TRSMapCameraUpdate.Reason)
  func mapView(_ mapView: TARASMap.TRSMapView, cameraDidChangeBy reason: TARASMap.TRSMapCameraUpdate.Reason)
  func mapViewDidChangeCamera(_ mapView: TARASMap.TRSMapView)
}
extension TARASMap.TRSMapViewCameraDelegate {
  public func mapView(_ mapView: TARASMap.TRSMapView, cameraWillChangeBy reason: TARASMap.TRSMapCameraUpdate.Reason)
  public func mapView(_ mapView: TARASMap.TRSMapView, cameraDidChangeBy reason: TARASMap.TRSMapCameraUpdate.Reason)
  public func mapViewDidChangeCamera(_ mapView: TARASMap.TRSMapView)
}
public protocol TRSMapViewOptionDelegate : AnyObject {
  func mapView(optionDidChange mapView: TARASMap.TRSMapView)
}
extension TARASMap.TRSMapViewOptionDelegate {
  public func mapView(optionDidChange mapView: TARASMap.TRSMapView)
}
public protocol TRSMapGeometry {
  var centerPoint: TARASMap.TRSMapPoint { get }
  var boundaryPoints: [TARASMap.TRSMapPoint] { get }
  func geometryShouldVisible(in circle: TARASMap.TRSMapCircle) -> Swift.Bool
}
extension TARASMap.TRSMapGeometry {
  public func geometryShouldVisible(in circle: TARASMap.TRSMapCircle) -> Swift.Bool
}
public struct TRSMapPoint {
  public static let zero: TARASMap.TRSMapPoint
  public var x: CoreGraphics.CGFloat
  public var y: CoreGraphics.CGFloat
  public init(x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat)
  public func distance(from: TARASMap.TRSMapPoint) -> CoreGraphics.CGFloat
}
extension TARASMap.TRSMapPoint : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension TARASMap.TRSMapPoint : Swift.Equatable {
  public static func == (lhs: TARASMap.TRSMapPoint, rhs: TARASMap.TRSMapPoint) -> Swift.Bool
}
extension TARASMap.TRSMapPoint : TARASMap.TRSMapGeometry {
  public var centerPoint: TARASMap.TRSMapPoint {
    get
  }
  public var boundaryPoints: [TARASMap.TRSMapPoint] {
    get
  }
}
public struct TRSMapRect {
  public static let zero: TARASMap.TRSMapRect
  public var origin: TARASMap.TRSMapPoint
  public var size: TARASMap.TRSMapSize
  public init(origin: TARASMap.TRSMapPoint, size: TARASMap.TRSMapSize)
  public init(x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat, width: CoreGraphics.CGFloat, height: CoreGraphics.CGFloat)
  public func contains(_ point: TARASMap.TRSMapPoint) -> Swift.Bool
}
extension TARASMap.TRSMapRect {
  public var center: TARASMap.TRSMapPoint {
    get
  }
  public var minX: CoreGraphics.CGFloat {
    get
  }
  public var minY: CoreGraphics.CGFloat {
    get
  }
  public var maxX: CoreGraphics.CGFloat {
    get
  }
  public var maxY: CoreGraphics.CGFloat {
    get
  }
  public var midX: CoreGraphics.CGFloat {
    get
  }
  public var midY: CoreGraphics.CGFloat {
    get
  }
}
extension TARASMap.TRSMapRect : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension TARASMap.TRSMapRect : Swift.Equatable {
  public static func == (lhs: TARASMap.TRSMapRect, rhs: TARASMap.TRSMapRect) -> Swift.Bool
}
extension TARASMap.TRSMapRect : TARASMap.TRSMapGeometry {
  public var centerPoint: TARASMap.TRSMapPoint {
    get
  }
  public var boundaryPoints: [TARASMap.TRSMapPoint] {
    get
  }
}
extension TARASMap.TRSMapRect {
  public func geometryShouldVisible(in circle: TARASMap.TRSMapCircle) -> Swift.Bool
}
public protocol TRSMapViewGestureDelegate : AnyObject {
  func mapView(_ mapView: TARASMap.TRSMapView, singleTapAt point: TARASMap.TRSMapPoint, with poi: TARASMap.TRSMapPOI?)
  func mapView(_ mapView: TARASMap.TRSMapView, doubleTapAt point: TARASMap.TRSMapPoint, with poi: TARASMap.TRSMapPOI?)
  func mapView(_ mapView: TARASMap.TRSMapView, longPressAt point: TARASMap.TRSMapPoint, with poi: TARASMap.TRSMapPOI?)
  func mapView(_ mapView: TARASMap.TRSMapView, dragBeginAt point: TARASMap.TRSMapPoint)
  func mapView(_ mapView: TARASMap.TRSMapView, dragEndAt point: TARASMap.TRSMapPoint)
  func mapViewDidDrag(_ mapView: TARASMap.TRSMapView)
  func mapView(_ mapView: TARASMap.TRSMapView, zoomBeginAt point: TARASMap.TRSMapPoint)
  func mapView(_ mapView: TARASMap.TRSMapView, zoomEndAt point: TARASMap.TRSMapPoint)
  func mapViewDidZoom(_ mapView: TARASMap.TRSMapView)
  func mapView(_ mapView: TARASMap.TRSMapView, rotateBeginAt point: TARASMap.TRSMapPoint)
  func mapView(_ mapView: TARASMap.TRSMapView, rotateEndAt point: TARASMap.TRSMapPoint)
  func mapViewDidRotate(_ mapView: TARASMap.TRSMapView)
}
extension TARASMap.TRSMapViewGestureDelegate {
  public func mapView(_ mapView: TARASMap.TRSMapView, singleTapAt point: TARASMap.TRSMapPoint, with poi: TARASMap.TRSMapPOI?)
  public func mapView(_ mapView: TARASMap.TRSMapView, doubleTapAt point: TARASMap.TRSMapPoint, with poi: TARASMap.TRSMapPOI?)
  public func mapView(_ mapView: TARASMap.TRSMapView, longPressAt point: TARASMap.TRSMapPoint, with poi: TARASMap.TRSMapPOI?)
  public func mapView(_ mapView: TARASMap.TRSMapView, dragBeginAt point: TARASMap.TRSMapPoint)
  public func mapView(_ mapView: TARASMap.TRSMapView, dragEndAt point: TARASMap.TRSMapPoint)
  public func mapViewDidDrag(_ mapView: TARASMap.TRSMapView)
  public func mapView(_ mapView: TARASMap.TRSMapView, zoomBeginAt point: TARASMap.TRSMapPoint)
  public func mapView(_ mapView: TARASMap.TRSMapView, zoomEndAt point: TARASMap.TRSMapPoint)
  public func mapViewDidZoom(_ mapView: TARASMap.TRSMapView)
  public func mapView(_ mapView: TARASMap.TRSMapView, rotateBeginAt point: TARASMap.TRSMapPoint)
  public func mapView(_ mapView: TARASMap.TRSMapView, rotateEndAt point: TARASMap.TRSMapPoint)
  public func mapViewDidRotate(_ mapView: TARASMap.TRSMapView)
}
public protocol TRSMapOveray : TARASMap.TRSMapItem {
}
public struct TRSMapInfo {
  public static let maxZoomLevelLimit: CoreGraphics.CGFloat
  public static let minZoomLevelLimit: CoreGraphics.CGFloat
  public let id: Swift.String
  public let name: Swift.String
  public let origin: TARASMap.TRSMapPoint
  public var size: TARASMap.TRSMapSize {
    get
  }
  public init(id: Swift.String, name: Swift.String, origin: TARASMap.TRSMapPoint, resolution: CoreGraphics.CGFloat, url: Foundation.URL)
  public var mapPointSize: CoreGraphics.CGSize {
    get
  }
  public func convertPointToMeter(_ point: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public func convertMeterToPoint(_ meter: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public func convertPointToMapPoint(_ point: CoreGraphics.CGPoint) -> TARASMap.TRSMapPoint
  public func convertMapPointToPoint(_ point: TARASMap.TRSMapPoint) -> CoreGraphics.CGPoint
  public func convertPointSizeToMapSize(_ size: CoreGraphics.CGSize) -> TARASMap.TRSMapSize
  public func convertMapSizeToPointSize(_ size: TARASMap.TRSMapSize) -> CoreGraphics.CGSize
  public func convertPointRectToMap(rect: CoreGraphics.CGRect) -> TARASMap.TRSMapRect
  public func convertMapRectToPoint(rect: TARASMap.TRSMapRect) -> CoreGraphics.CGRect
  public func convertScaleToMapScale(_ scale: CoreGraphics.CGFloat, in size: CoreGraphics.CGSize) -> CoreGraphics.CGFloat
  public func convertMapScaleToScale(_ scale: CoreGraphics.CGFloat, in size: CoreGraphics.CGSize) -> CoreGraphics.CGFloat
  public func convertAngleToMapAngle(_ radian: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  public func convertMapAngleToAngle(_ radian: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
}
public struct TRSMapCameraUpdate {
  public enum Reason {
    case control
    case gesture
    case developer
    public static func == (a: TARASMap.TRSMapCameraUpdate.Reason, b: TARASMap.TRSMapCameraUpdate.Reason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Animation : Swift.CaseIterable {
    case `default`
    case none
    case easeIn
    case easeEaseInOut
    case easeOut
    case linear
    public static var allCases: [TARASMap.TRSMapCameraUpdate.Animation] {
      get
    }
    public static func == (a: TARASMap.TRSMapCameraUpdate.Animation, b: TARASMap.TRSMapCameraUpdate.Animation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [TARASMap.TRSMapCameraUpdate.Animation]
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(position: TARASMap.TRSMapCameraPosition, animation: TARASMap.TRSMapCameraUpdate.Animation = .default)
  public init(positionClosure: @escaping (TARASMap.TRSMapView) -> TARASMap.TRSMapCameraPosition, animation: TARASMap.TRSMapCameraUpdate.Animation = .default)
}
extension TARASMap.TRSMapCameraUpdate : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension TARASMap.TRSMapCameraUpdate {
  public static func move(to mapPoint: TARASMap.TRSMapPoint, withZoomLevel zoomLevel: CoreGraphics.CGFloat? = nil, withHeading heading: CoreGraphics.CGFloat? = nil, animation: TARASMap.TRSMapCameraUpdate.Animation = .default) -> TARASMap.TRSMapCameraUpdate
  public static func zoom(to zoomLevel: CoreGraphics.CGFloat, withHeading heading: CoreGraphics.CGFloat? = nil, animation: TARASMap.TRSMapCameraUpdate.Animation = .default) -> TARASMap.TRSMapCameraUpdate
  public static func rotate(to heading: CoreGraphics.CGFloat, animation: TARASMap.TRSMapCameraUpdate.Animation = .default) -> TARASMap.TRSMapCameraUpdate
}
extension TARASMap.TRSMapCameraUpdate {
  public static func fit(points: [TARASMap.TRSMapPoint], withInset inset: UIKit.UIEdgeInsets = .zero, withHeading heading: CoreGraphics.CGFloat? = nil, animation: TARASMap.TRSMapCameraUpdate.Animation = .default) -> TARASMap.TRSMapCameraUpdate
  public static func fit(bounds: TARASMap.TRSMapRect, withInset inset: UIKit.UIEdgeInsets = .zero, withHeading heading: CoreGraphics.CGFloat? = nil, animation: TARASMap.TRSMapCameraUpdate.Animation = .default) -> TARASMap.TRSMapCameraUpdate
  public static func fit(circle: TARASMap.TRSMapCircle, withInset inset: UIKit.UIEdgeInsets = .zero, withHeading heading: CoreGraphics.CGFloat? = nil, animation: TARASMap.TRSMapCameraUpdate.Animation = .default) -> TARASMap.TRSMapCameraUpdate
}
extension TARASMap.TRSMapView : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc final public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc final public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc final public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc final public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc final public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc final public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TRSMapPOIView : UIKit.UIView, TARASMap.TRSMapItemDisplay {
  @_Concurrency.MainActor(unsafe) open var poi: TARASMap.TRSMapPOI?
  @_Concurrency.MainActor(unsafe) public var mapItem: TARASMap.TRSMapItem? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var selectableViews: [UIKit.UIView] {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc required convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) open func hitCheck(_ point: CoreGraphics.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func updateSelectionState(_ state: Swift.Bool, _ zoomLevel: CoreGraphics.CGFloat, _ angle: CoreGraphics.CGFloat, with mapInfo: TARASMap.TRSMapInfo, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func zoomLevelDidUpdate(_ zoomLevel: CoreGraphics.CGFloat, with mapInfo: TARASMap.TRSMapInfo)
  @_Concurrency.MainActor(unsafe) open func angleDidUpdate(_ cameraHeading: CoreGraphics.CGFloat, with mapInfo: TARASMap.TRSMapInfo)
  @objc deinit
}
public protocol TRSMapItemDisplay : TARASMap.ObjectPoolItem {
  var mapItem: TARASMap.TRSMapItem? { get }
}
public protocol TRSMapViewPOIDelegate : AnyObject {
  func mapView(_ mapView: TARASMap.TRSMapView, draggable poi: TARASMap.TRSMapPOI, dragBeginAt point: TARASMap.TRSMapPoint)
  func mapView(_ mapView: TARASMap.TRSMapView, draggable poi: TARASMap.TRSMapPOI, dragEndAt point: TARASMap.TRSMapPoint)
  func mapView(_ mapView: TARASMap.TRSMapView, poi: TARASMap.TRSMapPOI, didMoveAt point: TARASMap.TRSMapPoint)
}
extension TARASMap.TRSMapViewPOIDelegate {
  public func mapView(_ mapView: TARASMap.TRSMapView, draggable poi: TARASMap.TRSMapPOI, dragBeginAt point: TARASMap.TRSMapPoint)
  public func mapView(_ mapView: TARASMap.TRSMapView, draggable poi: TARASMap.TRSMapPOI, dragEndAt point: TARASMap.TRSMapPoint)
  public func mapView(_ mapView: TARASMap.TRSMapView, poi: TARASMap.TRSMapPOI, didMoveAt point: TARASMap.TRSMapPoint)
}
public protocol ObjectPoolItem : AnyObject {
  init()
}
public struct TRSMapLine {
  public var from: TARASMap.TRSMapPoint
  public var to: TARASMap.TRSMapPoint
  public init(from: TARASMap.TRSMapPoint, to: TARASMap.TRSMapPoint)
  public var distance: CoreGraphics.CGFloat {
    get
  }
}
extension TARASMap.TRSMapLine : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension TARASMap.TRSMapLine : Swift.Equatable {
  public static func == (lhs: TARASMap.TRSMapLine, rhs: TARASMap.TRSMapLine) -> Swift.Bool
}
extension TARASMap.TRSMapLine : TARASMap.TRSMapGeometry {
  public var centerPoint: TARASMap.TRSMapPoint {
    get
  }
  public var boundaryPoints: [TARASMap.TRSMapPoint] {
    get
  }
}
extension TARASMap.TRSMapLine {
  public func geometryShouldVisible(in circle: TARASMap.TRSMapCircle) -> Swift.Bool
}
public protocol TRSMapViewDelegate : AnyObject {
  func mapViewWillStartLoading(_ mapView: TARASMap.TRSMapView)
  func mapViewDidFinishLoading(_ mapView: TARASMap.TRSMapView)
  func mapViewDidFailLoading(_ mapView: TARASMap.TRSMapView, with error: Swift.Error)
  func mapView(_ mapView: TARASMap.TRSMapView, willDisplay display: TARASMap.TRSMapItemDisplay)
  func mapView(_ mapView: TARASMap.TRSMapView, didEndDisplaying display: TARASMap.TRSMapItemDisplay)
  func mapView(_ mapView: TARASMap.TRSMapView, viewForPOI poi: TARASMap.TRSMapPOI) -> TARASMap.TRSMapPOIView?
  func mapView(_ mapView: TARASMap.TRSMapView, didSelect view: TARASMap.TRSMapPOIView)
  func mapView(_ mapView: TARASMap.TRSMapView, didDeselect view: TARASMap.TRSMapPOIView)
  func mapView(_ mapView: TARASMap.TRSMapView, rendererForOveray overay: TARASMap.TRSMapOveray) -> TARASMap.TRSMapOverayRenderer?
}
extension TARASMap.TRSMapViewDelegate {
  public func mapViewWillStartLoading(_ mapView: TARASMap.TRSMapView)
  public func mapViewDidFinishLoading(_ mapView: TARASMap.TRSMapView)
  public func mapViewDidFailLoading(_ mapView: TARASMap.TRSMapView, with error: Swift.Error)
  public func mapView(_ mapView: TARASMap.TRSMapView, willDisplay display: TARASMap.TRSMapItemDisplay)
  public func mapView(_ mapView: TARASMap.TRSMapView, didEndDisplaying display: TARASMap.TRSMapItemDisplay)
  public func mapView(_ mapView: TARASMap.TRSMapView, viewForPOI poi: TARASMap.TRSMapPOI) -> TARASMap.TRSMapPOIView?
  public func mapView(_ mapView: TARASMap.TRSMapView, didSelect view: TARASMap.TRSMapPOIView)
  public func mapView(_ mapView: TARASMap.TRSMapView, didDeselect view: TARASMap.TRSMapPOIView)
  public func mapView(_ mapView: TARASMap.TRSMapView, rendererForOveray overay: TARASMap.TRSMapOveray) -> TARASMap.TRSMapOverayRenderer?
}
public struct TRSMapCircle {
  public static let zero: TARASMap.TRSMapCircle
  public var center: TARASMap.TRSMapPoint
  public var radius: CoreGraphics.CGFloat
  public init(center: TARASMap.TRSMapPoint, radius: CoreGraphics.CGFloat)
  public init(x: CoreGraphics.CGFloat, y: CoreGraphics.CGFloat, radius: CoreGraphics.CGFloat)
  public func contains(_ point: TARASMap.TRSMapPoint) -> Swift.Bool
}
extension TARASMap.TRSMapCircle : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension TARASMap.TRSMapCircle : Swift.Equatable {
  public static func == (lhs: TARASMap.TRSMapCircle, rhs: TARASMap.TRSMapCircle) -> Swift.Bool
}
extension TARASMap.TRSMapCircle : TARASMap.TRSMapGeometry {
  public var centerPoint: TARASMap.TRSMapPoint {
    get
  }
  public var boundaryPoints: [TARASMap.TRSMapPoint] {
    get
  }
}
extension TARASMap.TRSMapCircle {
  public func geometryShouldVisible(in circle: TARASMap.TRSMapCircle) -> Swift.Bool
}
public protocol TRSMapPOI : TARASMap.TRSMapItem {
  var title: Swift.String? { get }
  var subtitle: Swift.String? { get }
  var calloutAnchor: CoreGraphics.CGPoint { get }
  var calloutOffset: CoreGraphics.CGPoint { get }
  var calloutView: UIKit.UIView? { get }
  var isDraggable: Swift.Bool { get }
  var trackingOptions: TARASMap.TRSMapPOITrackingOptions { get set }
  var isSelected: Swift.Bool { get set }
  var heading: CoreGraphics.CGFloat { get }
  func updateTrackingOptions(_ options: TARASMap.TRSMapPOITrackingOptions)
}
extension TARASMap.TRSMapPOI {
  public func updateTrackingOptions(_ options: TARASMap.TRSMapPOITrackingOptions)
}
extension TARASMap.TRSMapPOI {
  public func updatePoint(_ point: TARASMap.TRSMapPoint)
}
public struct TRSMapPOITrackingOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let moving: TARASMap.TRSMapPOITrackingOptions
  public static let heading: TARASMap.TRSMapPOITrackingOptions
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = TARASMap.TRSMapPOITrackingOptions
  public typealias Element = TARASMap.TRSMapPOITrackingOptions
  public typealias RawValue = Swift.Int
}
extension TARASMap.TRSMapCameraUpdate.Reason : Swift.Equatable {}
extension TARASMap.TRSMapCameraUpdate.Reason : Swift.Hashable {}
extension TARASMap.TRSMapCameraUpdate.Animation : Swift.Equatable {}
extension TARASMap.TRSMapCameraUpdate.Animation : Swift.Hashable {}
